# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Author {
  _id: String!
  createdAt: DateTime!
  description: String
  name: String!
  slug: String!
  updatedAt: DateTime!
}

type Chapter {
  _id: String!
  chapterNumber: String!
  comic: Comic!
  createdAt: DateTime!
  name: String
  nextChapter: Chapter
  order: Float!
  pageCount: Int!
  pages: [Page!]!
  previousChapter: Chapter
  updatedAt: DateTime!
}

input ChapterOrder {
  id: String!
  order: Float!
}

type Comic {
  _id: String!
  artist: Author
  author: Author!
  category: Tag
  chapterCount: Int!
  createdAt: DateTime!
  createdBy: User!
  description: String!
  followCount: Float!
  genres: [Tag!]!
  imageCoverUrl: String!
  imageThumbUrl: String!
  name: String!
  officeUrl: String
  otherNames: [String!]!
  recentChapter: Chapter
  slug: String!
  status: String!
  updatedAt: DateTime!
}

input CreateAuthorDto {
  description: String!
  name: String!
}

input CreateChapterDto {
  chapterNumber: String!
  comicId: String!
  name: String
  pages: [PageInput!]!
}

input CreateComicInput {
  artistId: String
  authorId: String!
  categoryId: String!
  description: String! = ""
  genreIds: [String!]!
  imageCoverUrl: String!
  imageThumbUrl: String!
  name: String!
  officeUrl: String
  otherNames: [String!]
  status: String = "Chưa xuất bản"
}

input CreateTagDto {
  description: String!
  name: String!
}

input CreateUserDto {
  avatarUrl: String
  displayName: String
  email: String!
  rawPassword: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FindUserDto {
  _id: String
  email: String
  username: String
}

type Mutation {
  createAuthor(createAuthorInput: CreateAuthorDto!): Author!
  createChapter(input: CreateChapterDto!): Chapter!
  createComic(input: CreateComicInput!): Comic!
  createTag(createTagInput: CreateTagDto!): Tag!
  createUser(createUserInput: CreateUserDto!): User!
  deleteAuthor(id: String!): Boolean!
  deleteComic(id: String!): Boolean!
  updateAuthor(id: String!, updateAuthorInput: UpdateAuthorDto!): Author!
  updateChaptersOrder(input: UpdateChaptersOrderInput!): [Chapter!]!
  updateComic(id: String!, input: CreateComicInput!): Comic!
  updateImportantInfo(input: UpdateImportantInfoDTO!): User!
  updateTag(id: String!, updateTagInput: UpdateTagDto!): Tag!
  updateUser(id: String!, updateUserInput: UpdateUserDto!): User!
}

type Page {
  order: Float!
  url: String!
}

input PageInput {
  order: Float!
  url: String!
}

type Query {
  author(id: String!): Author!
  authors: [Author!]!
  getAllChapters(comicId: String!): [Chapter!]!
  getAllComics: [Comic!]!
  getAllHistories(limit: Float = 200, page: Float = 1, userId: String!): [ReadingHistory!]!
  getCategories: [Tag!]!
  getChapterById(chapterId: String!): Chapter!
  getComicById(id: String!): Comic!
  getComicBySlug(slug: String!): Comic!
  getComicsCreatedByUser(limit: Float = 10, page: Float = 1, userId: String!): [Comic!]!
  getGenres: [Tag!]!
  getLastedChapterByComicId(comicId: String!): Chapter!
  getRecentComics(limit: Float = 10, page: Float = 1): [Comic!]!
  getTopComics(limit: Float = 10, page: Float = 1): [Comic!]!
  getTrendingComics(input: TrendingSortInput!): [Comic!]!
  searchAuthor(keyword: String = "", limit: Float = 25, page: Float = 1): QueryAuthorsDTO!
  tag(id: String!): Tag!
  tags: [Tag!]!
  user(findUserInput: FindUserDto!): User!
  users(keywords: String, limit: Float = 25, page: Float = 1): UserQueryDto!
}

type QueryAuthorsDTO {
  authors: [Author!]!
  count: Float!
}

type ReadingHistory {
  chapter: Chapter
  createdAt: DateTime!
}

type Tag {
  _id: String!
  createdAt: DateTime!
  description: String
  name: String!
  slug: String!
  type: String!
  updatedAt: DateTime!
}

input TrendingSortInput {
  limit: Float = 5
  page: Float = 5
  type: String!
}

input UpdateAuthorDto {
  description: String
  name: String
}

input UpdateChaptersOrderInput {
  chapters: [ChapterOrder!]!
}

input UpdateImportantInfoDTO {
  email: String
  newPassword: String
  password: String!
}

input UpdateTagDto {
  description: String
  name: String
}

input UpdateUserDto {
  base64Avatar: String
  description: String
  displayName: String
  email: String
  role: Int
  username: String
}

type User {
  _id: String!
  avatarUrl: String
  createdAt: DateTime!
  description: String
  displayName: String!
  email: String!
  followedComics: [Comic!]!
  readingHistories: [ReadingHistory!]!
  role: Int!
  updatedAt: DateTime!
  username: String!
}

type UserQueryDto {
  count: Int!
  users: [User!]!
}