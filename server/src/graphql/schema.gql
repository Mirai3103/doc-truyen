# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdvanceSearchInput {
  authorIds: [String!]
  categoryIds: [String!]
  creatorId: String
  genreIds: [String!]
  keyword: String
  limit: Float = 25
  page: Float = 1
  sortField: String = "updatedAt"
  sortType: String = "desc"
}

type Author {
  _id: ID!
  createdAt: DateTime!
  description: String
  name: String!
  totalComic: Float!
  updatedAt: DateTime!
}

type AuthorAggregateGroupBy {
  _id: ID
  name: String
}

type AuthorConnection {
  """Array of nodes."""
  nodes: [Author!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AuthorCountAggregate {
  _id: Int
  name: Int
}

input AuthorDeleteFilter {
  _id: IDFilterComparison
  and: [AuthorDeleteFilter!]
  name: StringFieldComparison
  or: [AuthorDeleteFilter!]
}

type AuthorDeleteResponse {
  _id: ID
  createdAt: DateTime
  description: String
  name: String
  totalComic: Float
  updatedAt: DateTime
}

input AuthorFilter {
  _id: IDFilterComparison
  and: [AuthorFilter!]
  name: StringFieldComparison
  or: [AuthorFilter!]
}

type AuthorMaxAggregate {
  _id: ID
  name: String
}

type AuthorMinAggregate {
  _id: ID
  name: String
}

input AuthorSort {
  direction: SortDirection!
  field: AuthorSortFields!
  nulls: SortNulls
}

enum AuthorSortFields {
  _id
  name
}

input AuthorUpdateFilter {
  _id: IDFilterComparison
  and: [AuthorUpdateFilter!]
  name: StringFieldComparison
  or: [AuthorUpdateFilter!]
}

type Chapter {
  _id: ID!
  chapterNumber: String!
  comic: Comic!
  createdAt: DateTime!
  monthViewCount: Int!
  name: String
  nextChapter: Chapter
  order: Float!
  pageCount: Int!
  pages: [Page!]!
  previousChapter: Chapter
  todayViewCount: Int!
  totalViewCount: Int!
  updatedAt: DateTime!
  weekViewCount: Int!
  yearViewCount: Int!
}

input ChapterOrder {
  id: String!
  order: Float!
}

type Comic {
  _id: ID!
  artist: Author
  author: Author!
  category: Tag
  chapterCount: Int!
  contributors: [String!]!
  createdAt: DateTime!
  createdBy: User!
  description: String!
  followCount: Int
  genres: [Tag!]!
  imageCoverUrl: String!
  imageThumbUrl: String!
  monthViewCount: Int!
  name: String!
  officeUrl: String
  otherNames: [String!]!
  recentChapter: Chapter
  slug: String!
  status: String!
  todayViewCount: Int!
  totalViewCount: Int!
  updatedAt: DateTime!
  weekViewCount: Int!
  yearViewCount: Int!
}

type ComicPage {
  data: [Comic!]!
  totalPages: Int!
}

type ComicStatus {
  id: String!
  name: String!
}

input CreateAuthorDto {
  description: String!
  name: String!
}

input CreateChapterDto {
  chapterNumber: String!
  comicId: String!
  name: String
  pages: [PageInput!]!
}

input CreateComicInput {
  artistId: String
  authorId: String!
  categoryId: String!
  description: String! = ""
  genreIds: [String!]!
  imageCoverUrl: String!
  imageThumbUrl: String!
  name: String!
  officeUrl: String
  otherNames: [String!]
  status: String = "Chưa xuất bản"
}

input CreateManyAuthorsInput {
  """Array of records to create"""
  authors: [CreateAuthorDto!]!
}

input CreateOneAuthorInput {
  """The record to create"""
  author: CreateAuthorDto!
}

input CreateTagDto {
  description: String!
  name: String!
}

input CreateUserDto {
  avatarUrl: String
  displayName: String
  email: String!
  rawPassword: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyAuthorsInput {
  """Filter to find records to delete"""
  filter: AuthorDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteOneAuthorInput {
  """The id of the record to delete."""
  id: ID!
}

input FindUserDto {
  _id: String
  email: String
  username: String
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  createAuthor(createAuthorInput: CreateAuthorDto!): Author!
  createChapter(input: CreateChapterDto!): Chapter!
  createComic(input: CreateComicInput!): Comic!
  createManyAuthors(input: CreateManyAuthorsInput!): [Author!]!
  createOneAuthor(input: CreateOneAuthorInput!): Author!
  createTag(createTagInput: CreateTagDto!): Tag!
  createUser(createUserInput: CreateUserDto!): User!
  deleteAuthor(id: String!): Boolean!
  deleteComic(id: String!): Boolean!
  deleteManyAuthors(input: DeleteManyAuthorsInput!): DeleteManyResponse!
  deleteOneAuthor(input: DeleteOneAuthorInput!): AuthorDeleteResponse!
  removeAllHistories: Boolean!
  removeHistory(chapterId: String!): Boolean!
  toggleFollowComic(comicId: String!): Boolean!
  totalUploadedComic: Int!
  updateAuthor(id: String!, updateAuthorInput: UpdateAuthorDto!): Author!
  updateChaptersOrder(input: UpdateChaptersOrderInput!): [Chapter!]!
  updateComic(id: String!, input: CreateComicInput!): Comic!
  updateImportantInfo(input: UpdateImportantInfoDTO!): User!
  updateManyAuthors(input: UpdateManyAuthorsInput!): UpdateManyResponse!
  updateOneAuthor(input: UpdateOneAuthorInput!): Author!
  updateTag(id: String!, updateTagInput: UpdateTagDto!): Tag!
  updateUser(id: String!, updateUserInput: UpdateUserDto!): User!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Page {
  order: Float!
  url: String!
}

input PageInput {
  order: Float!
  url: String!
}

type Query {
  advanceSearchComics(input: AdvanceSearchInput!): ComicPage!
  author(
    """The id of the record to find."""
    id: ID!
  ): Author
  authors(
    """Specify to filter the records returned."""
    filter: AuthorFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AuthorSort!]! = []
  ): AuthorConnection!
  getAllChapters(comicId: String!): [Chapter!]!
  getAllComicStatus: [ComicStatus!]!
  getAllComics: [Comic!]!
  getAllHistories(limit: Float = 200, page: Float = 1): [ReadingHistory!]!
  getCategories: [Tag!]!
  getChapterById(chapterId: String!): Chapter!
  getChaptersByComicSlug(slug: String!): [Chapter!]!
  getComicById(id: String!): Comic!
  getComicBySlug(slug: String!): Comic!
  getComicCreatedByUser(limit: Float = 10, page: Float = 1, userId: String!): [Comic!]!
  getComicsByAuthorId(id: String!, limit: Float = 25, page: Float = 1): ComicPage!
  getComicsByTagId(id: String!, limit: Float = 25, page: Float = 1): ComicPage!
  getComicsByUserId(id: String!, limit: Float = 25, page: Float = 1): ComicPage!
  getContributedComics(limit: Float = 10, page: Float = 1): [Comic!]!
  getFollowedComics(limit: Float = 25, page: Float = 1): ComicPage!
  getGenres: [Tag!]!
  getLastedChapterByComicId(comicId: String!): Chapter!
  getRecentComics(limit: Float = 10, page: Float = 1): ComicPage!
  getSortOptions: [SortOption!]!
  getTopComics(limit: Float = 10, page: Float = 1): ComicPage!
  getTrendingComics(input: TrendingSortInput!): [Comic!]!
  isInFollowedComics(comicId: String!): Boolean!
  searchAuthor(keyword: String = "", limit: Float = 25, page: Float = 1): QueryAuthorsDTO!
  tag(id: String!): Tag!
  tags: [Tag!]!
  user(findUserInput: FindUserDto!): User!
  users(keywords: String, limit: Float = 25, page: Float = 1): UserQueryDto!
}

type QueryAuthorsDTO {
  authors: [Author!]!
  count: Float!
}

type ReadingHistory {
  chapter: Chapter
  createdAt: DateTime!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type SortOption {
  name: String!
  value: SortType!
}

type SortType {
  direction: String!
  field: String!
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type Tag {
  _id: ID!
  createdAt: DateTime!
  description: String
  name: String!
  totalComic: Float!
  type: String!
  updatedAt: DateTime!
}

input TrendingSortInput {
  limit: Float = 5
  page: Float = 5
  type: String!
}

input UpdateAuthorDto {
  description: String
  name: String
}

input UpdateChaptersOrderInput {
  chapters: [ChapterOrder!]!
}

input UpdateImportantInfoDTO {
  email: String
  newPassword: String
  password: String!
}

input UpdateManyAuthorsInput {
  """Filter used to find fields to update"""
  filter: AuthorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAuthorDto!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateOneAuthorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAuthorDto!
}

input UpdateTagDto {
  description: String
  name: String
}

input UpdateUserDto {
  base64Avatar: String
  description: String
  displayName: String
  email: String
  role: Int
  username: String
}

type User {
  _id: ID!
  avatarUrl: String
  createdAt: DateTime!
  description: String
  displayName: String!
  email: String!
  followedComics: [Comic!]!
  readingHistories: [ReadingHistory!]!
  role: Int!
  totalUploadedComic: Int!
  updatedAt: DateTime!
  username: String!
}

type UserQueryDto {
  count: Int!
  users: [User!]!
}