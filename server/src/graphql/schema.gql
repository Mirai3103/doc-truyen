# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdvanceSearchInput {
  authorIds: [String!]
  categoryIds: [String!]
  creatorId: String
  genreIds: [String!]
  keyword: String
  limit: Float = 25
  page: Float = 1
  sortField: String = "updatedAt"
  sortType: String = "desc"
}

type Author {
  _id: ID!
  createdAt: DateTime!
  description: String
  name: String!
  totalComics: Float!
  updatedAt: DateTime!
}

type AuthorConnection {
  """Array of nodes."""
  nodes: [Author!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input AuthorCreatedAtFilterComparison {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  neq: DateTime
}

input AuthorDeleteFilter {
  _id: IDFilterComparison
  and: [AuthorDeleteFilter!]
  createdAt: AuthorCreatedAtFilterComparison
  name: StringFieldComparison
  or: [AuthorDeleteFilter!]
  totalComics: NumberFieldComparison
  updatedAt: AuthorUpdatedAtFilterComparison
}

type AuthorDeleteResponse {
  _id: ID
  createdAt: DateTime
  description: String
  name: String
  totalComics: Float
  updatedAt: DateTime
}

input AuthorFilter {
  _id: IDFilterComparison
  and: [AuthorFilter!]
  createdAt: AuthorCreatedAtFilterComparison
  name: StringFieldComparison
  or: [AuthorFilter!]
  totalComics: NumberFieldComparison
  updatedAt: AuthorUpdatedAtFilterComparison
}

input AuthorSort {
  direction: SortDirection!
  field: AuthorSortFields!
  nulls: SortNulls
}

enum AuthorSortFields {
  _id
  createdAt
  name
  totalComics
  updatedAt
}

input AuthorUpdateFilter {
  _id: IDFilterComparison
  and: [AuthorUpdateFilter!]
  createdAt: AuthorCreatedAtFilterComparison
  name: StringFieldComparison
  or: [AuthorUpdateFilter!]
  totalComics: NumberFieldComparison
  updatedAt: AuthorUpdatedAtFilterComparison
}

input AuthorUpdatedAtFilterComparison {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  neq: DateTime
}

type Chapter {
  _id: ID!
  chapterNumber: String!
  comic: Comic!
  createdAt: DateTime!
  monthViewCount: Int!
  name: String
  nextChapter: Chapter
  order: Float!
  pageCount: Int!
  pages: [Page!]!
  previousChapter: Chapter
  todayViewCount: Int!
  totalViewCount: Int!
  updatedAt: DateTime!
  weekViewCount: Int!
  yearViewCount: Int!
}

input ChapterOrder {
  id: String!
  order: Float!
}

type Comic {
  _id: ID!
  artist: Author
  author: Author!
  category: Tag
  chapterCount: Int!
  contributors: [String!]!
  createdAt: DateTime!
  createdBy: User!
  description: String!
  followCount: Int
  genres: [Tag!]!
  imageCoverUrl: String!
  imageThumbUrl: String!
  monthViewCount: Int!
  name: String!
  officeUrl: String
  otherNames: [String!]!
  recentChapter: Chapter
  slug: String!
  status: String!
  todayViewCount: Int!
  totalViewCount: Int!
  updatedAt: DateTime!
  weekViewCount: Int!
  yearViewCount: Int!
}

type ComicBriefDto {
  author: Author!
  category: Tag!
  chapterCount: Int!
  contributors: [String!]!
  createdBy: User!
  description: String!
  followCount: Float!
  genres: Tag!
  imageCoverUrl: String!
  name: String!
  otherNames: [String!]!
  recentChapter: Chapter!
  slug: String!
  status: String!
  totalViewCount: Float!
}

input ComicBriefDtoChapterCountFilterComparison {
  between: ComicBriefDtoChapterCountFilterComparisonBetween
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

input ComicBriefDtoChapterCountFilterComparisonBetween {
  lower: Float!
  upper: Float!
}

type ComicBriefDtoConnection {
  """Array of nodes."""
  nodes: [ComicBriefDto!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input ComicBriefDtoContributorsFilterComparison {
  in: [[String!]!]
  notIn: [[String!]!]
}

input ComicBriefDtoCreatedAtFilterComparison {
  between: ComicBriefDtoCreatedAtFilterComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  neq: DateTime
}

input ComicBriefDtoCreatedAtFilterComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input ComicBriefDtoFilter {
  _id: IDFilterComparison
  and: [ComicBriefDtoFilter!]
  chapterCount: ComicBriefDtoChapterCountFilterComparison
  contributors: ComicBriefDtoContributorsFilterComparison
  createdAt: ComicBriefDtoCreatedAtFilterComparison
  followCount: ComicBriefDtoFollowCountFilterComparison
  name: ComicBriefDtoNameFilterComparison
  or: [ComicBriefDtoFilter!]
  slug: ComicBriefDtoSlugFilterComparison
  status: ComicBriefDtoStatusFilterComparison
  totalViewCount: ComicBriefDtoTotalViewCountFilterComparison
  updatedAt: ComicBriefDtoUpdatedAtFilterComparison
}

input ComicBriefDtoFollowCountFilterComparison {
  between: ComicBriefDtoFollowCountFilterComparisonBetween
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

input ComicBriefDtoFollowCountFilterComparisonBetween {
  lower: Float!
  upper: Float!
}

input ComicBriefDtoNameFilterComparison {
  eq: String
  iLike: String
  like: String
  neq: String
  notLike: String
}

input ComicBriefDtoSlugFilterComparison {
  eq: String
  iLike: String
  like: String
  neq: String
  notLike: String
}

input ComicBriefDtoSort {
  direction: SortDirection!
  field: ComicBriefDtoSortFields!
  nulls: SortNulls
}

enum ComicBriefDtoSortFields {
  _id
  chapterCount
  contributors
  createdAt
  followCount
  name
  slug
  status
  totalViewCount
  updatedAt
}

input ComicBriefDtoStatusFilterComparison {
  eq: String
  in: [String!]
  notIn: [String!]
}

input ComicBriefDtoTotalViewCountFilterComparison {
  between: ComicBriefDtoTotalViewCountFilterComparisonBetween
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

input ComicBriefDtoTotalViewCountFilterComparisonBetween {
  lower: Float!
  upper: Float!
}

input ComicBriefDtoUpdatedAtFilterComparison {
  between: ComicBriefDtoUpdatedAtFilterComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  neq: DateTime
}

input ComicBriefDtoUpdatedAtFilterComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

type ComicPage {
  data: [Comic!]!
  totalPages: Int!
}

type ComicStatus {
  id: String!
  name: String!
}

input CreateAuthorDto {
  description: String!
  name: String!
}

input CreateChapterDto {
  chapterNumber: String!
  comicId: String!
  name: String
  pages: [PageInput!]!
}

input CreateComicInput {
  artistId: String
  authorId: String!
  categoryId: String!
  description: String! = ""
  genreIds: [String!]!
  imageCoverUrl: String!
  imageThumbUrl: String!
  name: String!
  officeUrl: String
  otherNames: [String!]
  status: String = "Chưa xuất bản"
}

input CreateManyAuthorsInput {
  """Array of records to create"""
  authors: [CreateAuthorDto!]!
}

input CreateManyTagsInput {
  """Array of records to create"""
  tags: [CreateTagDto!]!
}

input CreateOneAuthorInput {
  """The record to create"""
  author: CreateAuthorDto!
}

input CreateOneTagInput {
  """The record to create"""
  tag: CreateTagDto!
}

input CreateTagDto {
  description: String!
  name: String!
  type: String! = "genre"
}

input CreateUserDto {
  avatarUrl: String
  displayName: String
  email: String!
  rawPassword: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyAuthorsInput {
  """Filter to find records to delete"""
  filter: AuthorDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyTagsInput {
  """Filter to find records to delete"""
  filter: TagDeleteFilter!
}

input DeleteOneAuthorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTagInput {
  """The id of the record to delete."""
  id: ID!
}

input FindUserDto {
  _id: String
  email: String
  username: String
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  createAuthor(createAuthorInput: CreateAuthorDto!): Author!
  createChapter(input: CreateChapterDto!): Chapter!
  createComic(input: CreateComicInput!): Comic!
  createManyAuthors(input: CreateManyAuthorsInput!): [Author!]!
  createManyTags(input: CreateManyTagsInput!): [Tag!]!
  createOneAuthor(input: CreateOneAuthorInput!): Author!
  createOneTag(input: CreateOneTagInput!): Tag!
  createTag(createTagInput: CreateTagDto!): Tag!
  createUser(createUserInput: CreateUserDto!): User!
  deleteAuthor(id: String!): Boolean!
  deleteComic(id: String!): Boolean!
  deleteManyAuthors(input: DeleteManyAuthorsInput!): DeleteManyResponse!
  deleteManyTags(input: DeleteManyTagsInput!): DeleteManyResponse!
  deleteOneAuthor(input: DeleteOneAuthorInput!): AuthorDeleteResponse!
  deleteOneTag(input: DeleteOneTagInput!): TagDeleteResponse!
  removeAllHistories: Boolean!
  removeHistory(chapterId: String!): Boolean!
  toggleFollowComic(comicId: String!): Boolean!
  totalUploadedComic: Int!
  updateAuthor(id: String!, updateAuthorInput: UpdateAuthorDto!): Author!
  updateChaptersOrder(input: UpdateChaptersOrderInput!): [Chapter!]!
  updateComic(id: String!, input: CreateComicInput!): Comic!
  updateImportantInfo(input: UpdateImportantInfoDTO!): User!
  updateManyAuthors(input: UpdateManyAuthorsInput!): UpdateManyResponse!
  updateManyTags(input: UpdateManyTagsInput!): UpdateManyResponse!
  updateOneAuthor(input: UpdateOneAuthorInput!): Author!
  updateOneTag(input: UpdateOneTagInput!): Tag!
  updateTag(id: String!, updateTagInput: UpdateTagDto!): Tag!
  updateUser(id: String!, updateUserInput: UpdateUserDto!): User!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Page {
  order: Float!
  url: String!
}

input PageInput {
  order: Float!
  url: String!
}

type Query {
  advanceSearchComics(input: AdvanceSearchInput!): ComicPage!
  author(
    """The id of the record to find."""
    id: ID!
  ): Author!
  authors(
    """Specify to filter the records returned."""
    filter: AuthorFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AuthorSort!]! = []
  ): AuthorConnection!
  comicBriefDto(
    """The id of the record to find."""
    id: ID!
  ): ComicBriefDto!
  comicBriefDtos(
    """Specify to filter the records returned."""
    filter: ComicBriefDtoFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [ComicBriefDtoSort!]! = []
  ): ComicBriefDtoConnection!
  getAllChapters(comicId: String!): [Chapter!]!
  getAllComicStatus: [ComicStatus!]!
  getAllComics: [Comic!]!
  getAllHistories(limit: Float = 200, page: Float = 1): [ReadingHistory!]!
  getCategories: [Tag!]!
  getChapterById(chapterId: String!): Chapter!
  getChaptersByComicSlug(slug: String!): [Chapter!]!
  getComicById(id: String!): Comic!
  getComicBySlug(slug: String!): Comic!
  getComicCreatedByUser(limit: Float = 10, page: Float = 1, userId: String!): [Comic!]!
  getComicsByAuthorId(id: String!, limit: Float = 25, page: Float = 1): ComicPage!
  getComicsByTagId(id: String!, limit: Float = 25, page: Float = 1): ComicPage!
  getComicsByUserId(id: String!, limit: Float = 25, page: Float = 1): ComicPage!
  getContributedComics(limit: Float = 10, page: Float = 1): [Comic!]!
  getFollowedComics(limit: Float = 25, page: Float = 1): ComicPage!
  getGenres: [Tag!]!
  getLastedChapterByComicId(comicId: String!): Chapter!
  getRecentComics(limit: Float = 10, page: Float = 1): ComicPage!
  getSortOptions: [SortOption!]!
  getTopComics(limit: Float = 10, page: Float = 1): ComicPage!
  getTrendingComics(input: TrendingSortInput!): [Comic!]!
  isInFollowedComics(comicId: String!): Boolean!
  searchAuthor(keyword: String = "", limit: Float = 25, page: Float = 1): QueryAuthorsDTO!
  tag(
    """The id of the record to find."""
    id: ID!
  ): Tag!
  tags(
    """Specify to filter the records returned."""
    filter: TagFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [TagSort!]! = []
  ): TagConnection!
  user(findUserInput: FindUserDto!): User!
  users(keywords: String, limit: Float = 25, page: Float = 1): UserQueryDto!
}

type QueryAuthorsDTO {
  authors: [Author!]!
  count: Float!
}

type ReadingHistory {
  chapter: Chapter
  createdAt: DateTime!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type SortOption {
  name: String!
  value: SortType!
}

type SortType {
  direction: String!
  field: String!
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type Tag {
  _id: ID!
  createdAt: DateTime!
  description: String
  name: String!
  totalComics: Float!
  type: String!
  updatedAt: DateTime!
}

type TagConnection {
  """Array of nodes."""
  nodes: [Tag!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input TagCreatedAtFilterComparison {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  neq: DateTime
}

input TagDeleteFilter {
  _id: IDFilterComparison
  and: [TagDeleteFilter!]
  createdAt: TagCreatedAtFilterComparison
  name: StringFieldComparison
  or: [TagDeleteFilter!]
  totalComics: NumberFieldComparison
  type: StringFieldComparison
  updatedAt: TagUpdatedAtFilterComparison
}

type TagDeleteResponse {
  _id: ID
  createdAt: DateTime
  description: String
  name: String
  totalComics: Float
  type: String
  updatedAt: DateTime
}

input TagFilter {
  _id: IDFilterComparison
  and: [TagFilter!]
  createdAt: TagCreatedAtFilterComparison
  name: StringFieldComparison
  or: [TagFilter!]
  totalComics: NumberFieldComparison
  type: StringFieldComparison
  updatedAt: TagUpdatedAtFilterComparison
}

input TagSort {
  direction: SortDirection!
  field: TagSortFields!
  nulls: SortNulls
}

enum TagSortFields {
  _id
  createdAt
  name
  totalComics
  type
  updatedAt
}

input TagUpdateFilter {
  _id: IDFilterComparison
  and: [TagUpdateFilter!]
  createdAt: TagCreatedAtFilterComparison
  name: StringFieldComparison
  or: [TagUpdateFilter!]
  totalComics: NumberFieldComparison
  type: StringFieldComparison
  updatedAt: TagUpdatedAtFilterComparison
}

input TagUpdatedAtFilterComparison {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  neq: DateTime
}

input TrendingSortInput {
  limit: Float = 5
  page: Float = 5
  type: String!
}

input UpdateAuthorDto {
  description: String
  name: String
}

input UpdateChaptersOrderInput {
  chapters: [ChapterOrder!]!
}

input UpdateImportantInfoDTO {
  email: String
  newPassword: String
  password: String!
}

input UpdateManyAuthorsInput {
  """Filter used to find fields to update"""
  filter: AuthorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAuthorDto!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyTagsInput {
  """Filter used to find fields to update"""
  filter: TagUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTagDto!
}

input UpdateOneAuthorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAuthorDto!
}

input UpdateOneTagInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTagDto!
}

input UpdateTagDto {
  description: String
  name: String
  type: String!
}

input UpdateUserDto {
  base64Avatar: String
  description: String
  displayName: String
  email: String
  role: Int
  username: String
}

type User {
  _id: ID!
  avatarUrl: String
  createdAt: DateTime!
  description: String
  displayName: String!
  email: String!
  followedComics: [Comic!]!
  readingHistories: [ReadingHistory!]!
  role: Int!
  totalUploadedComic: Int!
  updatedAt: DateTime!
  username: String!
}

type UserQueryDto {
  count: Int!
  users: [User!]!
}