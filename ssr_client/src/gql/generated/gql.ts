/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query GetCategoriesQuery {\n        categories: getCategories {\n            _id\n            name\n        }\n    }\n": types.GetCategoriesQueryDocument,
    "\n    query SearchByKeyword($keyword: String!, $limit: Float) {\n        data: advanceSearchComics(input: { keyword: $keyword, limit: $limit }) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                author {\n                    name\n                    _id\n                }\n            }\n        }\n    }\n": types.SearchByKeywordDocument,
    "\n    query GetTopComics($limit: Float, $page: Float) {\n        getTopComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                }\n            }\n        }\n    }\n": types.GetTopComicsDocument,
    "\n    query GetRecentComics($limit: Float, $page: Float) {\n        getRecentComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n        }\n    }\n": types.GetRecentComicsDocument,
    "\n    query SearchAuthor($keyword: String!) {\n        searchAuthor(keyword: $keyword, page: 1, limit: 10) {\n            authors {\n                _id\n                name\n            }\n        }\n    }\n": types.SearchAuthorDocument,
    "\n    query GetFilterOptionsQuery {\n        statuses: getAllComicStatus {\n            name\n            id\n        }\n        sortOptions: getSortOptions {\n            name\n            value {\n                direction\n                field\n            }\n        }\n        categories: getCategories {\n            _id\n            name\n        }\n        tags: getGenres {\n            _id\n            name\n        }\n    }\n": types.GetFilterOptionsQueryDocument,
    "\n    query AdvanceSearchComics($input: AdvanceSearchInput!) {\n        advanceSearchComics(input: $input) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                description\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n            totalPages\n        }\n    }\n": types.AdvanceSearchComicsDocument,
    "\n    query GetRecentComicsPaginatedQuery($limit: Float, $page: Float) {\n        getRecentComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n            totalPages\n        }\n    }\n": types.GetRecentComicsPaginatedQueryDocument,
    "\n    mutation toggleFollowComic($comicId: String!) {\n        toggleFollowComic(comicId: $comicId)\n    }\n": types.ToggleFollowComicDocument,
    "\n    query checkIsFollowComic($comicId: String!) {\n        isInFollowedComics(comicId: $comicId)\n    }\n": types.CheckIsFollowComicDocument,
    "\n    query GetChapterProps($chapterId: String!, $comicSlug: String!) {\n        getChapterById(chapterId: $chapterId) {\n            _id\n            chapterNumber\n            nextChapter {\n                chapterNumber\n                _id\n            }\n            previousChapter {\n                chapterNumber\n                _id\n            }\n            order\n            pages {\n                order\n                url\n            }\n            name\n            createdAt\n        }\n        getChaptersByComicSlug(slug: $comicSlug) {\n            _id\n            chapterNumber\n            order\n            name\n        }\n        getComicBySlug(slug: $comicSlug) {\n            _id\n            slug\n            name\n            category {\n                name\n                _id\n            }\n        }\n    }\n": types.GetChapterPropsDocument,
    "\n  query getComicBySlug($slug: String!) {\n    getComicBySlug(slug: $slug) {\n      _id\n      slug\n      artist {\n        name\n        _id\n      }\n      author {\n        name\n        _id\n      }\n      category {\n        name\n        _id\n      }\n      genres {\n        name\n        _id\n      }\n      createdAt\n      updatedAt\n      description\n      followCount\n      totalViewCount\n      imageCoverUrl\n      name\n      createdBy {\n        _id\n        description\n        avatarUrl\n        displayName\n      }\n      otherNames\n      status\n      totalViewCount\n    }\n  }\n": types.GetComicBySlugDocument,
    "\n  query getAllChapters($comicId: String!) {\n    getAllChapters(comicId: $comicId) {\n      _id\n      chapterNumber\n      createdAt\n      order\n      name\n    }\n  }\n": types.GetAllChaptersDocument,
    "\n  query GetMyBookmarks($limit: Float!, $page: Float!) {\n    getFollowedComics(limit: $limit, page: $page) {\n      data {\n        _id\n        category {\n          _id\n          name\n        }\n        imageCoverUrl\n        name\n        updatedAt\n        recentChapter {\n          _id\n          chapterNumber\n          updatedAt\n          order\n          name\n          createdAt\n        }\n      }\n      totalPages\n    }\n  }\n": types.GetMyBookmarksDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetCategoriesQuery {\n        categories: getCategories {\n            _id\n            name\n        }\n    }\n"): (typeof documents)["\n    query GetCategoriesQuery {\n        categories: getCategories {\n            _id\n            name\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchByKeyword($keyword: String!, $limit: Float) {\n        data: advanceSearchComics(input: { keyword: $keyword, limit: $limit }) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                author {\n                    name\n                    _id\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query SearchByKeyword($keyword: String!, $limit: Float) {\n        data: advanceSearchComics(input: { keyword: $keyword, limit: $limit }) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                author {\n                    name\n                    _id\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetTopComics($limit: Float, $page: Float) {\n        getTopComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetTopComics($limit: Float, $page: Float) {\n        getTopComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetRecentComics($limit: Float, $page: Float) {\n        getRecentComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetRecentComics($limit: Float, $page: Float) {\n        getRecentComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchAuthor($keyword: String!) {\n        searchAuthor(keyword: $keyword, page: 1, limit: 10) {\n            authors {\n                _id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    query SearchAuthor($keyword: String!) {\n        searchAuthor(keyword: $keyword, page: 1, limit: 10) {\n            authors {\n                _id\n                name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetFilterOptionsQuery {\n        statuses: getAllComicStatus {\n            name\n            id\n        }\n        sortOptions: getSortOptions {\n            name\n            value {\n                direction\n                field\n            }\n        }\n        categories: getCategories {\n            _id\n            name\n        }\n        tags: getGenres {\n            _id\n            name\n        }\n    }\n"): (typeof documents)["\n    query GetFilterOptionsQuery {\n        statuses: getAllComicStatus {\n            name\n            id\n        }\n        sortOptions: getSortOptions {\n            name\n            value {\n                direction\n                field\n            }\n        }\n        categories: getCategories {\n            _id\n            name\n        }\n        tags: getGenres {\n            _id\n            name\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query AdvanceSearchComics($input: AdvanceSearchInput!) {\n        advanceSearchComics(input: $input) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                description\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n            totalPages\n        }\n    }\n"): (typeof documents)["\n    query AdvanceSearchComics($input: AdvanceSearchInput!) {\n        advanceSearchComics(input: $input) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                description\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n            totalPages\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetRecentComicsPaginatedQuery($limit: Float, $page: Float) {\n        getRecentComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n            totalPages\n        }\n    }\n"): (typeof documents)["\n    query GetRecentComicsPaginatedQuery($limit: Float, $page: Float) {\n        getRecentComics(limit: $limit, page: $page) {\n            data {\n                _id\n                imageCoverUrl\n                name\n                slug\n                recentChapter {\n                    chapterNumber\n                    name\n                    order\n                    _id\n                    createdAt\n                    updatedAt\n                }\n                category {\n                    _id\n                    name\n                }\n                author {\n                    name\n                    _id\n                }\n            }\n            totalPages\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation toggleFollowComic($comicId: String!) {\n        toggleFollowComic(comicId: $comicId)\n    }\n"): (typeof documents)["\n    mutation toggleFollowComic($comicId: String!) {\n        toggleFollowComic(comicId: $comicId)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query checkIsFollowComic($comicId: String!) {\n        isInFollowedComics(comicId: $comicId)\n    }\n"): (typeof documents)["\n    query checkIsFollowComic($comicId: String!) {\n        isInFollowedComics(comicId: $comicId)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetChapterProps($chapterId: String!, $comicSlug: String!) {\n        getChapterById(chapterId: $chapterId) {\n            _id\n            chapterNumber\n            nextChapter {\n                chapterNumber\n                _id\n            }\n            previousChapter {\n                chapterNumber\n                _id\n            }\n            order\n            pages {\n                order\n                url\n            }\n            name\n            createdAt\n        }\n        getChaptersByComicSlug(slug: $comicSlug) {\n            _id\n            chapterNumber\n            order\n            name\n        }\n        getComicBySlug(slug: $comicSlug) {\n            _id\n            slug\n            name\n            category {\n                name\n                _id\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetChapterProps($chapterId: String!, $comicSlug: String!) {\n        getChapterById(chapterId: $chapterId) {\n            _id\n            chapterNumber\n            nextChapter {\n                chapterNumber\n                _id\n            }\n            previousChapter {\n                chapterNumber\n                _id\n            }\n            order\n            pages {\n                order\n                url\n            }\n            name\n            createdAt\n        }\n        getChaptersByComicSlug(slug: $comicSlug) {\n            _id\n            chapterNumber\n            order\n            name\n        }\n        getComicBySlug(slug: $comicSlug) {\n            _id\n            slug\n            name\n            category {\n                name\n                _id\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getComicBySlug($slug: String!) {\n    getComicBySlug(slug: $slug) {\n      _id\n      slug\n      artist {\n        name\n        _id\n      }\n      author {\n        name\n        _id\n      }\n      category {\n        name\n        _id\n      }\n      genres {\n        name\n        _id\n      }\n      createdAt\n      updatedAt\n      description\n      followCount\n      totalViewCount\n      imageCoverUrl\n      name\n      createdBy {\n        _id\n        description\n        avatarUrl\n        displayName\n      }\n      otherNames\n      status\n      totalViewCount\n    }\n  }\n"): (typeof documents)["\n  query getComicBySlug($slug: String!) {\n    getComicBySlug(slug: $slug) {\n      _id\n      slug\n      artist {\n        name\n        _id\n      }\n      author {\n        name\n        _id\n      }\n      category {\n        name\n        _id\n      }\n      genres {\n        name\n        _id\n      }\n      createdAt\n      updatedAt\n      description\n      followCount\n      totalViewCount\n      imageCoverUrl\n      name\n      createdBy {\n        _id\n        description\n        avatarUrl\n        displayName\n      }\n      otherNames\n      status\n      totalViewCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAllChapters($comicId: String!) {\n    getAllChapters(comicId: $comicId) {\n      _id\n      chapterNumber\n      createdAt\n      order\n      name\n    }\n  }\n"): (typeof documents)["\n  query getAllChapters($comicId: String!) {\n    getAllChapters(comicId: $comicId) {\n      _id\n      chapterNumber\n      createdAt\n      order\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMyBookmarks($limit: Float!, $page: Float!) {\n    getFollowedComics(limit: $limit, page: $page) {\n      data {\n        _id\n        category {\n          _id\n          name\n        }\n        imageCoverUrl\n        name\n        updatedAt\n        recentChapter {\n          _id\n          chapterNumber\n          updatedAt\n          order\n          name\n          createdAt\n        }\n      }\n      totalPages\n    }\n  }\n"): (typeof documents)["\n  query GetMyBookmarks($limit: Float!, $page: Float!) {\n    getFollowedComics(limit: $limit, page: $page) {\n      data {\n        _id\n        category {\n          _id\n          name\n        }\n        imageCoverUrl\n        name\n        updatedAt\n        recentChapter {\n          _id\n          chapterNumber\n          updatedAt\n          order\n          name\n          createdAt\n        }\n      }\n      totalPages\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;