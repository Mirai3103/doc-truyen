/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation createAuthor($createAuthorInput: CreateAuthorDto!) {\n  createAuthor(createAuthorInput: $createAuthorInput) {\n    _id\n  }\n}\n\nmutation UpdateAuthor($UpdateAuthorInput: UpdateAuthorDto!, $id: String!) {\n  updateAuthor(updateAuthorInput: $UpdateAuthorInput, id: $id) {\n    _id\n    name\n    description\n  }\n}\n\nmutation deleteAuthor($id: String!) {\n  deleteAuthor(id: $id)\n}": types.CreateAuthorDocument,
    "mutation createChapter($input: CreateChapterDto!) {\n  createChapter(input: $input) {\n    order\n  }\n}": types.CreateChapterDocument,
    "mutation createComic($input: CreateComicInput!) {\n  createComic(input: $input) {\n    name\n  }\n}\n\nmutation updateComic($id: String!, $input: CreateComicInput!) {\n  updateComic(id: $id, input: $input) {\n    name\n  }\n}\n\nmutation updateChaptersOrder($input: UpdateChaptersOrderInput!) {\n  data: updateChaptersOrder(input: $input) {\n    order\n  }\n}\n\nmutation deleteComic($id: String!) {\n  deleteComic(id: $id)\n}": types.CreateComicDocument,
    "mutation removeHistory($chapterId: String!) {\n  removeHistory(chapterId: $chapterId)\n}\n\nmutation removeAllHistory {\n  removeAllHistories\n}": types.RemoveHistoryDocument,
    "mutation createTag($createTagInput: CreateTagDto!) {\n  createTag(createTagInput: $createTagInput) {\n    _id\n  }\n}\n\nmutation UpdateTag($UpdateTagInput: UpdateTagDto!, $id: String!) {\n  updateTag(updateTagInput: $UpdateTagInput, id: $id) {\n    _id\n    name\n    description\n  }\n}": types.CreateTagDocument,
    "mutation updateUser($id: String!, $updateUserInput: UpdateUserDto!) {\n  updateUser(id: $id, updateUserInput: $updateUserInput) {\n    _id\n  }\n}\n\nmutation updateImportantUserInfo($updateUserInput: UpdateImportantInfoDTO!) {\n  updateImportantInfo(input: $updateUserInput) {\n    _id\n  }\n}": types.UpdateUserDocument,
    "query AdvanceSearchComics($input: AdvanceSearchInput!) {\n  data: advanceSearchComics(input: $input) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery SearchByKeyword($keyword: String!) {\n  data: advanceSearchComics(input: {keyword: $keyword}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    slug\n    author {\n      name\n      _id\n    }\n  }\n}": types.AdvanceSearchComicsDocument,
    "query searchAuthor($keyword: String, $limit: Float, $page: Float) {\n  searchAuthor(keyword: $keyword, limit: $limit, page: $page) {\n    authors {\n      _id\n      name\n      description\n      createdAt\n    }\n    count\n  }\n}\n\nquery FindAllAuthors {\n  authors {\n    _id\n    name\n  }\n}": types.SearchAuthorDocument,
    "query getAllChapters($comicId: String!) {\n  getAllChapters(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n  }\n}\n\nquery getAllChaptersAdmin($comicId: String!) {\n  chapters: getAllChapters(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n    updatedAt\n    pageCount\n  }\n}\n\nquery getChapterById($chapterId: String!) {\n  getChapterById(chapterId: $chapterId) {\n    chapterNumber\n    nextChapter {\n      chapterNumber\n    }\n    previousChapter {\n      chapterNumber\n    }\n    order\n    comic {\n      name\n      slug\n      _id\n    }\n    pages {\n      order\n      url\n    }\n    name\n  }\n}\n\nquery getLastedChapterByComicId($comicId: String!) {\n  getLastedChapterByComicId(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n  }\n}": types.GetAllChaptersDocument,
    "query GetGeneralInfo {\n  authors {\n    name\n    _id\n  }\n  genres: getGenres {\n    name\n    _id\n  }\n  categories: getCategories {\n    name\n    _id\n  }\n}": types.GetGeneralInfoDocument,
    "query getComicBySlug($slug: String!) {\n  getComicBySlug(slug: $slug) {\n    _id\n    artist {\n      name\n      _id\n    }\n    author {\n      name\n      _id\n    }\n    category {\n      name\n      _id\n    }\n    genres {\n      name\n      _id\n    }\n    createdAt\n    updatedAt\n    description\n    followCount\n    totalViewCount\n    imageCoverUrl\n    imageThumbUrl\n    name\n    createdBy {\n      _id\n      description\n      avatarUrl\n      displayName\n    }\n    otherNames\n    status\n  }\n}\n\nquery getComicById($id: String!) {\n  comic: getComicById(id: $id) {\n    _id\n    author {\n      _id\n      name\n    }\n    name\n    otherNames\n    category {\n      _id\n      name\n    }\n    artist {\n      name\n      _id\n    }\n    createdBy {\n      _id\n    }\n    createdAt\n    updatedAt\n    description\n    imageCoverUrl\n    imageThumbUrl\n    status\n    slug\n    officeUrl\n    genres {\n      name\n      _id\n    }\n  }\n}": types.GetComicBySlugDocument,
    "query GetComicsCreatedByUser($userId: String!, $limit: Float, $page: Float) {\n  comics: getContributedComics(userId: $userId, limit: $limit, page: $page) {\n    _id\n    slug\n    name\n    author {\n      name\n    }\n    category {\n      name\n    }\n    chapterCount\n    updatedAt\n    followCount\n    totalViewCount\n    imageCoverUrl\n    name\n    recentChapter {\n      chapterNumber\n      name\n    }\n    status\n  }\n}": types.GetComicsCreatedByUserDocument,
    "query GetRecentComics($limit: Float, $page: Float) {\n  getRecentComics(limit: $limit, page: $page) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery GetTopComics($limit: Float, $page: Float) {\n  getTopComics(limit: $limit, page: $page) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n    }\n  }\n}": types.GetRecentComicsDocument,
    "query getAllHistories($userId: String!) {\n  histories: getAllHistories(userId: $userId) {\n    chapter {\n      chapterNumber\n      name\n      _id\n      comic {\n        name\n        slug\n        imageCoverUrl\n      }\n    }\n    createdAt\n  }\n}": types.GetAllHistoriesDocument,
    "query findAllTag {\n  tags {\n    _id\n    name\n    type\n    description\n  }\n}": types.FindAllTagDocument,
    "query getTrendingComics($page: Float, $limit: Float) {\n  TopFollow: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"totalViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopWeek: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"weekViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopMonth: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"monthViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopYear: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"yearViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  Newest: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"updatedAt\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopFollow($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"totalViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopWeek($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"weekViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopMonth($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"monthViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopYear($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"yearViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getNewest($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"updatedAt\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}": types.GetTrendingComicsDocument,
    "query findAllUsers($keywords: String!, $limit: Float, $page: Float) {\n  users(keywords: $keywords, limit: $limit, page: $page) {\n    count\n    users {\n      _id\n      avatarUrl\n      email\n      displayName\n      role\n      username\n      createdAt\n      description\n    }\n  }\n}\n\nquery getUserById($input: FindUserDto!) {\n  user(findUserInput: $input) {\n    _id\n    avatarUrl\n    createdAt\n    description\n    displayName\n    email\n    role\n    username\n  }\n}": types.FindAllUsersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createAuthor($createAuthorInput: CreateAuthorDto!) {\n  createAuthor(createAuthorInput: $createAuthorInput) {\n    _id\n  }\n}\n\nmutation UpdateAuthor($UpdateAuthorInput: UpdateAuthorDto!, $id: String!) {\n  updateAuthor(updateAuthorInput: $UpdateAuthorInput, id: $id) {\n    _id\n    name\n    description\n  }\n}\n\nmutation deleteAuthor($id: String!) {\n  deleteAuthor(id: $id)\n}"): (typeof documents)["mutation createAuthor($createAuthorInput: CreateAuthorDto!) {\n  createAuthor(createAuthorInput: $createAuthorInput) {\n    _id\n  }\n}\n\nmutation UpdateAuthor($UpdateAuthorInput: UpdateAuthorDto!, $id: String!) {\n  updateAuthor(updateAuthorInput: $UpdateAuthorInput, id: $id) {\n    _id\n    name\n    description\n  }\n}\n\nmutation deleteAuthor($id: String!) {\n  deleteAuthor(id: $id)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createChapter($input: CreateChapterDto!) {\n  createChapter(input: $input) {\n    order\n  }\n}"): (typeof documents)["mutation createChapter($input: CreateChapterDto!) {\n  createChapter(input: $input) {\n    order\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createComic($input: CreateComicInput!) {\n  createComic(input: $input) {\n    name\n  }\n}\n\nmutation updateComic($id: String!, $input: CreateComicInput!) {\n  updateComic(id: $id, input: $input) {\n    name\n  }\n}\n\nmutation updateChaptersOrder($input: UpdateChaptersOrderInput!) {\n  data: updateChaptersOrder(input: $input) {\n    order\n  }\n}\n\nmutation deleteComic($id: String!) {\n  deleteComic(id: $id)\n}"): (typeof documents)["mutation createComic($input: CreateComicInput!) {\n  createComic(input: $input) {\n    name\n  }\n}\n\nmutation updateComic($id: String!, $input: CreateComicInput!) {\n  updateComic(id: $id, input: $input) {\n    name\n  }\n}\n\nmutation updateChaptersOrder($input: UpdateChaptersOrderInput!) {\n  data: updateChaptersOrder(input: $input) {\n    order\n  }\n}\n\nmutation deleteComic($id: String!) {\n  deleteComic(id: $id)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation removeHistory($chapterId: String!) {\n  removeHistory(chapterId: $chapterId)\n}\n\nmutation removeAllHistory {\n  removeAllHistories\n}"): (typeof documents)["mutation removeHistory($chapterId: String!) {\n  removeHistory(chapterId: $chapterId)\n}\n\nmutation removeAllHistory {\n  removeAllHistories\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation createTag($createTagInput: CreateTagDto!) {\n  createTag(createTagInput: $createTagInput) {\n    _id\n  }\n}\n\nmutation UpdateTag($UpdateTagInput: UpdateTagDto!, $id: String!) {\n  updateTag(updateTagInput: $UpdateTagInput, id: $id) {\n    _id\n    name\n    description\n  }\n}"): (typeof documents)["mutation createTag($createTagInput: CreateTagDto!) {\n  createTag(createTagInput: $createTagInput) {\n    _id\n  }\n}\n\nmutation UpdateTag($UpdateTagInput: UpdateTagDto!, $id: String!) {\n  updateTag(updateTagInput: $UpdateTagInput, id: $id) {\n    _id\n    name\n    description\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateUser($id: String!, $updateUserInput: UpdateUserDto!) {\n  updateUser(id: $id, updateUserInput: $updateUserInput) {\n    _id\n  }\n}\n\nmutation updateImportantUserInfo($updateUserInput: UpdateImportantInfoDTO!) {\n  updateImportantInfo(input: $updateUserInput) {\n    _id\n  }\n}"): (typeof documents)["mutation updateUser($id: String!, $updateUserInput: UpdateUserDto!) {\n  updateUser(id: $id, updateUserInput: $updateUserInput) {\n    _id\n  }\n}\n\nmutation updateImportantUserInfo($updateUserInput: UpdateImportantInfoDTO!) {\n  updateImportantInfo(input: $updateUserInput) {\n    _id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AdvanceSearchComics($input: AdvanceSearchInput!) {\n  data: advanceSearchComics(input: $input) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery SearchByKeyword($keyword: String!) {\n  data: advanceSearchComics(input: {keyword: $keyword}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    slug\n    author {\n      name\n      _id\n    }\n  }\n}"): (typeof documents)["query AdvanceSearchComics($input: AdvanceSearchInput!) {\n  data: advanceSearchComics(input: $input) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery SearchByKeyword($keyword: String!) {\n  data: advanceSearchComics(input: {keyword: $keyword}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    slug\n    author {\n      name\n      _id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query searchAuthor($keyword: String, $limit: Float, $page: Float) {\n  searchAuthor(keyword: $keyword, limit: $limit, page: $page) {\n    authors {\n      _id\n      name\n      description\n      createdAt\n    }\n    count\n  }\n}\n\nquery FindAllAuthors {\n  authors {\n    _id\n    name\n  }\n}"): (typeof documents)["query searchAuthor($keyword: String, $limit: Float, $page: Float) {\n  searchAuthor(keyword: $keyword, limit: $limit, page: $page) {\n    authors {\n      _id\n      name\n      description\n      createdAt\n    }\n    count\n  }\n}\n\nquery FindAllAuthors {\n  authors {\n    _id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getAllChapters($comicId: String!) {\n  getAllChapters(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n  }\n}\n\nquery getAllChaptersAdmin($comicId: String!) {\n  chapters: getAllChapters(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n    updatedAt\n    pageCount\n  }\n}\n\nquery getChapterById($chapterId: String!) {\n  getChapterById(chapterId: $chapterId) {\n    chapterNumber\n    nextChapter {\n      chapterNumber\n    }\n    previousChapter {\n      chapterNumber\n    }\n    order\n    comic {\n      name\n      slug\n      _id\n    }\n    pages {\n      order\n      url\n    }\n    name\n  }\n}\n\nquery getLastedChapterByComicId($comicId: String!) {\n  getLastedChapterByComicId(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n  }\n}"): (typeof documents)["query getAllChapters($comicId: String!) {\n  getAllChapters(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n  }\n}\n\nquery getAllChaptersAdmin($comicId: String!) {\n  chapters: getAllChapters(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n    updatedAt\n    pageCount\n  }\n}\n\nquery getChapterById($chapterId: String!) {\n  getChapterById(chapterId: $chapterId) {\n    chapterNumber\n    nextChapter {\n      chapterNumber\n    }\n    previousChapter {\n      chapterNumber\n    }\n    order\n    comic {\n      name\n      slug\n      _id\n    }\n    pages {\n      order\n      url\n    }\n    name\n  }\n}\n\nquery getLastedChapterByComicId($comicId: String!) {\n  getLastedChapterByComicId(comicId: $comicId) {\n    _id\n    chapterNumber\n    createdAt\n    order\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetGeneralInfo {\n  authors {\n    name\n    _id\n  }\n  genres: getGenres {\n    name\n    _id\n  }\n  categories: getCategories {\n    name\n    _id\n  }\n}"): (typeof documents)["query GetGeneralInfo {\n  authors {\n    name\n    _id\n  }\n  genres: getGenres {\n    name\n    _id\n  }\n  categories: getCategories {\n    name\n    _id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getComicBySlug($slug: String!) {\n  getComicBySlug(slug: $slug) {\n    _id\n    artist {\n      name\n      _id\n    }\n    author {\n      name\n      _id\n    }\n    category {\n      name\n      _id\n    }\n    genres {\n      name\n      _id\n    }\n    createdAt\n    updatedAt\n    description\n    followCount\n    totalViewCount\n    imageCoverUrl\n    imageThumbUrl\n    name\n    createdBy {\n      _id\n      description\n      avatarUrl\n      displayName\n    }\n    otherNames\n    status\n  }\n}\n\nquery getComicById($id: String!) {\n  comic: getComicById(id: $id) {\n    _id\n    author {\n      _id\n      name\n    }\n    name\n    otherNames\n    category {\n      _id\n      name\n    }\n    artist {\n      name\n      _id\n    }\n    createdBy {\n      _id\n    }\n    createdAt\n    updatedAt\n    description\n    imageCoverUrl\n    imageThumbUrl\n    status\n    slug\n    officeUrl\n    genres {\n      name\n      _id\n    }\n  }\n}"): (typeof documents)["query getComicBySlug($slug: String!) {\n  getComicBySlug(slug: $slug) {\n    _id\n    artist {\n      name\n      _id\n    }\n    author {\n      name\n      _id\n    }\n    category {\n      name\n      _id\n    }\n    genres {\n      name\n      _id\n    }\n    createdAt\n    updatedAt\n    description\n    followCount\n    totalViewCount\n    imageCoverUrl\n    imageThumbUrl\n    name\n    createdBy {\n      _id\n      description\n      avatarUrl\n      displayName\n    }\n    otherNames\n    status\n  }\n}\n\nquery getComicById($id: String!) {\n  comic: getComicById(id: $id) {\n    _id\n    author {\n      _id\n      name\n    }\n    name\n    otherNames\n    category {\n      _id\n      name\n    }\n    artist {\n      name\n      _id\n    }\n    createdBy {\n      _id\n    }\n    createdAt\n    updatedAt\n    description\n    imageCoverUrl\n    imageThumbUrl\n    status\n    slug\n    officeUrl\n    genres {\n      name\n      _id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetComicsCreatedByUser($userId: String!, $limit: Float, $page: Float) {\n  comics: getContributedComics(userId: $userId, limit: $limit, page: $page) {\n    _id\n    slug\n    name\n    author {\n      name\n    }\n    category {\n      name\n    }\n    chapterCount\n    updatedAt\n    followCount\n    totalViewCount\n    imageCoverUrl\n    name\n    recentChapter {\n      chapterNumber\n      name\n    }\n    status\n  }\n}"): (typeof documents)["query GetComicsCreatedByUser($userId: String!, $limit: Float, $page: Float) {\n  comics: getContributedComics(userId: $userId, limit: $limit, page: $page) {\n    _id\n    slug\n    name\n    author {\n      name\n    }\n    category {\n      name\n    }\n    chapterCount\n    updatedAt\n    followCount\n    totalViewCount\n    imageCoverUrl\n    name\n    recentChapter {\n      chapterNumber\n      name\n    }\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetRecentComics($limit: Float, $page: Float) {\n  getRecentComics(limit: $limit, page: $page) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery GetTopComics($limit: Float, $page: Float) {\n  getTopComics(limit: $limit, page: $page) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n    }\n  }\n}"): (typeof documents)["query GetRecentComics($limit: Float, $page: Float) {\n  getRecentComics(limit: $limit, page: $page) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery GetTopComics($limit: Float, $page: Float) {\n  getTopComics(limit: $limit, page: $page) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getAllHistories($userId: String!) {\n  histories: getAllHistories(userId: $userId) {\n    chapter {\n      chapterNumber\n      name\n      _id\n      comic {\n        name\n        slug\n        imageCoverUrl\n      }\n    }\n    createdAt\n  }\n}"): (typeof documents)["query getAllHistories($userId: String!) {\n  histories: getAllHistories(userId: $userId) {\n    chapter {\n      chapterNumber\n      name\n      _id\n      comic {\n        name\n        slug\n        imageCoverUrl\n      }\n    }\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query findAllTag {\n  tags {\n    _id\n    name\n    type\n    description\n  }\n}"): (typeof documents)["query findAllTag {\n  tags {\n    _id\n    name\n    type\n    description\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getTrendingComics($page: Float, $limit: Float) {\n  TopFollow: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"totalViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopWeek: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"weekViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopMonth: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"monthViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopYear: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"yearViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  Newest: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"updatedAt\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopFollow($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"totalViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopWeek($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"weekViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopMonth($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"monthViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopYear($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"yearViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getNewest($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"updatedAt\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}"): (typeof documents)["query getTrendingComics($page: Float, $limit: Float) {\n  TopFollow: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"totalViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopWeek: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"weekViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopMonth: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"monthViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  TopYear: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"yearViewCount\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n  Newest: getTrendingComics(\n    input: {page: $page, limit: $limit, type: \"updatedAt\"}\n  ) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopFollow($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"totalViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopWeek($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"weekViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopMonth($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"monthViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getTopYear($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"yearViewCount\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}\n\nquery getNewest($page: Float, $limit: Float) {\n  getTrendingComics(input: {page: $page, limit: $limit, type: \"updatedAt\"}) {\n    _id\n    imageThumbUrl\n    imageCoverUrl\n    name\n    description\n    slug\n    recentChapter {\n      chapterNumber\n      name\n      order\n      _id\n      createdAt\n      updatedAt\n    }\n    category {\n      _id\n      name\n    }\n    author {\n      name\n      _id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query findAllUsers($keywords: String!, $limit: Float, $page: Float) {\n  users(keywords: $keywords, limit: $limit, page: $page) {\n    count\n    users {\n      _id\n      avatarUrl\n      email\n      displayName\n      role\n      username\n      createdAt\n      description\n    }\n  }\n}\n\nquery getUserById($input: FindUserDto!) {\n  user(findUserInput: $input) {\n    _id\n    avatarUrl\n    createdAt\n    description\n    displayName\n    email\n    role\n    username\n  }\n}"): (typeof documents)["query findAllUsers($keywords: String!, $limit: Float, $page: Float) {\n  users(keywords: $keywords, limit: $limit, page: $page) {\n    count\n    users {\n      _id\n      avatarUrl\n      email\n      displayName\n      role\n      username\n      createdAt\n      description\n    }\n  }\n}\n\nquery getUserById($input: FindUserDto!) {\n  user(findUserInput: $input) {\n    _id\n    avatarUrl\n    createdAt\n    description\n    displayName\n    email\n    role\n    username\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;